type Artwork {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  title: String
  description: String
  made: DateTime
  section: Section
  mediaResources(sort: String, limit: Int, start: Int, where: JSON): [Multimedia]
}

input ArtworkInput {
  title: String
  description: String
  made: DateTime
  mediaResources: [ID]
  section: ID
}

"""Someone who made an artwork."""
type Author {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  Name: String
  description: String
  born: DateTime
  died: DateTime
}

input AuthorInput {
  Name: String
  description: String
  born: DateTime
  died: DateTime
}

input createArtworkInput {
  data: ArtworkInput
}

type createArtworkPayload {
  artwork: Artwork
}

input createAuthorInput {
  data: AuthorInput
}

type createAuthorPayload {
  author: Author
}

input createExhibitionInput {
  data: ExhibitionInput
}

type createExhibitionPayload {
  exhibition: Exhibition
}

input createLocationInput {
  data: LocationInput
}

type createLocationPayload {
  location: Location
}

input createMultimediaInput {
  data: MultimediaInput
}

type createMultimediaPayload {
  multimedia: Multimedia
}

input createRoleInput {
  data: RoleInput
}

type createRolePayload {
  role: UsersPermissionsRole
}

input createRoomInput {
  data: RoomInput
}

type createRoomPayload {
  room: Room
}

input createSectionInput {
  data: SectionInput
}

type createSectionPayload {
  section: Section
}

input createSequenceInput {
  data: SequenceInput
}

type createSequencePayload {
  sequence: Sequence
}

input createStepInput {
  data: StepInput
}

type createStepPayload {
  step: Step
}

input createTicketInput {
  data: TicketInput
}

type createTicketPayload {
  ticket: Ticket
}

input createTourInput {
  data: TourInput
}

type createTourPayload {
  tour: Tour
}

input createUserInput {
  data: UserInput
}

type createUserPayload {
  user: UsersPermissionsUser
}

"""
The `DateTime` scalar represents a date and time following the ISO 8601 standard
"""
scalar DateTime

input deleteArtworkInput {
  where: InputID
}

type deleteArtworkPayload {
  artwork: Artwork
}

input deleteAuthorInput {
  where: InputID
}

type deleteAuthorPayload {
  author: Author
}

input deleteExhibitionInput {
  where: InputID
}

type deleteExhibitionPayload {
  exhibition: Exhibition
}

input deleteLocationInput {
  where: InputID
}

type deleteLocationPayload {
  location: Location
}

input deleteMultimediaInput {
  where: InputID
}

type deleteMultimediaPayload {
  multimedia: Multimedia
}

input deleteRoleInput {
  where: InputID
}

type deleteRolePayload {
  role: UsersPermissionsRole
}

input deleteRoomInput {
  where: InputID
}

type deleteRoomPayload {
  room: Room
}

input deleteSectionInput {
  where: InputID
}

type deleteSectionPayload {
  section: Section
}

input deleteSequenceInput {
  where: InputID
}

type deleteSequencePayload {
  sequence: Sequence
}

input deleteStepInput {
  where: InputID
}

type deleteStepPayload {
  step: Step
}

input deleteTicketInput {
  where: InputID
}

type deleteTicketPayload {
  ticket: Ticket
}

input deleteTourInput {
  where: InputID
}

type deleteTourPayload {
  tour: Tour
}

input deleteUserInput {
  where: InputID
}

type deleteUserPayload {
  user: UsersPermissionsUser
}

input editArtworkInput {
  title: String
  description: String
  made: DateTime
  mediaResources: [ID]
  section: ID
}

input editAuthorInput {
  Name: String
  description: String
  born: DateTime
  died: DateTime
}

input editExhibitionInput {
  title: String
  description: String
  from: DateTime
  to: DateTime
  tickets: [ID]
  sections: [ID]
}

input editFileInput {
  name: String
  hash: String
  sha256: String
  ext: String
  mime: String
  size: String
  url: String
  provider: String
  public_id: String
  related: [ID]
}

input editLocationInput {
  name: String
  room: ID
  step: ID
}

input editMultimediaInput {
  name: String
  type: ENUM_MULTIMEDIA_TYPE
  sourceFile: ID
  section: ID
  artwork: ID
}

input editRoleInput {
  name: String
  description: String
  type: String
  permissions: [ID]
  users: [ID]
}

input editRoomInput {
  name: String
  number: String
  locations: [ID]
}

input editSectionInput {
  name: String
  description: String
  exhibition: ID
  multimedias: [ID]
  artworks: [ID]
}

input editSequenceInput {
  sequenceNumber: Int
  multimedia: ID
  step: ID
}

input editStepInput {
  title: String
  description: String
  coverPicture: ID
  orderedMediaResources: [ID]
  locations: [ID]
  tour: ID
}

input editTicketInput {
  name: String
  description: String
  price: Float
  exhibitions: [ID]
}

input editTourInput {
  name: String
  description: String
  steps: [ID]
}

input editUserInput {
  username: String
  email: String
  provider: String
  password: String
  resetPasswordToken: String
  confirmed: Boolean
  blocked: Boolean
  role: ID
}

enum ENUM_MULTIMEDIA_TYPE {
  audio
  video
  text
  picture
}

"""Future, past and present exhibition in the museum."""
type Exhibition {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  title: String
  description: String
  from: DateTime
  to: DateTime
  tickets(sort: String, limit: Int, start: Int, where: JSON): [Ticket]
  sections(sort: String, limit: Int, start: Int, where: JSON): [Section]
}

input ExhibitionInput {
  title: String
  description: String
  from: DateTime
  to: DateTime
  tickets: [ID]
  sections: [ID]
}

input FileInput {
  name: String!
  hash: String!
  sha256: String
  ext: String
  mime: String!
  size: String!
  url: String!
  provider: String!
  public_id: String
  related: [ID]
}

input InputID {
  id: ID!
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

"""Location is precise and easy to locate part of the room."""
type Location {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  name: String
  room: Room
  step: Step
}

input LocationInput {
  name: String
  room: ID
  step: ID
}

"""The `Long` scalar type represents 52-bit integers"""
scalar Long

union Morph = UsersPermissionsMe | UsersPermissionsMeRole | Artwork | createArtworkPayload | updateArtworkPayload | deleteArtworkPayload | Author | createAuthorPayload | updateAuthorPayload | deleteAuthorPayload | Exhibition | createExhibitionPayload | updateExhibitionPayload | deleteExhibitionPayload | Location | createLocationPayload | updateLocationPayload | deleteLocationPayload | Multimedia | createMultimediaPayload | updateMultimediaPayload | deleteMultimediaPayload | Room | createRoomPayload | updateRoomPayload | deleteRoomPayload | Section | createSectionPayload | updateSectionPayload | deleteSectionPayload | Sequence | createSequencePayload | updateSequencePayload | deleteSequencePayload | Step | createStepPayload | updateStepPayload | deleteStepPayload | Ticket | createTicketPayload | updateTicketPayload | deleteTicketPayload | Tour | createTourPayload | updateTourPayload | deleteTourPayload | UploadFile | UsersPermissionsPermission | UsersPermissionsRole | createRolePayload | updateRolePayload | deleteRolePayload | UsersPermissionsUser | createUserPayload | updateUserPayload | deleteUserPayload

"""
MediaResource is a universal enclosure around all media types. That includes audio, video, pictures, text and more.
"""
type Multimedia {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  name: String
  type: ENUM_MULTIMEDIA_TYPE
  sourceFile: UploadFile
  section: Section
  artwork: Artwork
}

input MultimediaInput {
  name: String
  type: ENUM_MULTIMEDIA_TYPE
  sourceFile: ID
  section: ID
  artwork: ID
}

type Mutation {
  createArtwork(input: createArtworkInput): createArtworkPayload
  updateArtwork(input: updateArtworkInput): updateArtworkPayload
  deleteArtwork(input: deleteArtworkInput): deleteArtworkPayload
  createAuthor(input: createAuthorInput): createAuthorPayload
  updateAuthor(input: updateAuthorInput): updateAuthorPayload
  deleteAuthor(input: deleteAuthorInput): deleteAuthorPayload
  createExhibition(input: createExhibitionInput): createExhibitionPayload
  updateExhibition(input: updateExhibitionInput): updateExhibitionPayload
  deleteExhibition(input: deleteExhibitionInput): deleteExhibitionPayload
  createLocation(input: createLocationInput): createLocationPayload
  updateLocation(input: updateLocationInput): updateLocationPayload
  deleteLocation(input: deleteLocationInput): deleteLocationPayload
  createMultimedia(input: createMultimediaInput): createMultimediaPayload
  updateMultimedia(input: updateMultimediaInput): updateMultimediaPayload
  deleteMultimedia(input: deleteMultimediaInput): deleteMultimediaPayload
  createRoom(input: createRoomInput): createRoomPayload
  updateRoom(input: updateRoomInput): updateRoomPayload
  deleteRoom(input: deleteRoomInput): deleteRoomPayload
  createSection(input: createSectionInput): createSectionPayload
  updateSection(input: updateSectionInput): updateSectionPayload
  deleteSection(input: deleteSectionInput): deleteSectionPayload
  createSequence(input: createSequenceInput): createSequencePayload
  updateSequence(input: updateSequenceInput): updateSequencePayload
  deleteSequence(input: deleteSequenceInput): deleteSequencePayload
  createStep(input: createStepInput): createStepPayload
  updateStep(input: updateStepInput): updateStepPayload
  deleteStep(input: deleteStepInput): deleteStepPayload
  createTicket(input: createTicketInput): createTicketPayload
  updateTicket(input: updateTicketInput): updateTicketPayload
  deleteTicket(input: deleteTicketInput): deleteTicketPayload
  createTour(input: createTourInput): createTourPayload
  updateTour(input: updateTourInput): updateTourPayload
  deleteTour(input: deleteTourInput): deleteTourPayload

  """Create a new role"""
  createRole(input: createRoleInput): createRolePayload

  """Update an existing role"""
  updateRole(input: updateRoleInput): updateRolePayload

  """Delete an existing role"""
  deleteRole(input: deleteRoleInput): deleteRolePayload

  """Create a new user"""
  createUser(input: createUserInput): createUserPayload

  """Update an existing user"""
  updateUser(input: updateUserInput): updateUserPayload

  """Delete an existing user"""
  deleteUser(input: deleteUserInput): deleteUserPayload
  upload(refId: ID, ref: String, source: String, file: Upload!): UploadFile!
}

type Query {
  artwork(id: ID!): Artwork
  artworks(sort: String, limit: Int, start: Int, where: JSON): [Artwork]
  author(id: ID!): Author
  authors(sort: String, limit: Int, start: Int, where: JSON): [Author]
  exhibition(id: ID!): Exhibition
  exhibitions(sort: String, limit: Int, start: Int, where: JSON): [Exhibition]
  location(id: ID!): Location
  locations(sort: String, limit: Int, start: Int, where: JSON): [Location]
  multimedia(id: ID!): Multimedia
  multimedias(sort: String, limit: Int, start: Int, where: JSON): [Multimedia]
  room(id: ID!): Room
  rooms(sort: String, limit: Int, start: Int, where: JSON): [Room]
  section(id: ID!): Section
  sections(sort: String, limit: Int, start: Int, where: JSON): [Section]
  sequence(id: ID!): Sequence
  sequences(sort: String, limit: Int, start: Int, where: JSON): [Sequence]
  step(id: ID!): Step
  steps(sort: String, limit: Int, start: Int, where: JSON): [Step]
  ticket(id: ID!): Ticket
  tickets(sort: String, limit: Int, start: Int, where: JSON): [Ticket]
  tour(id: ID!): Tour
  tours(sort: String, limit: Int, start: Int, where: JSON): [Tour]
  files(sort: String, limit: Int, start: Int, where: JSON): [UploadFile]
  role(id: ID!): UsersPermissionsRole

  """
  Retrieve all the existing roles. You can't apply filters on this query.
  """
  roles(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsRole]
  user(id: ID!): UsersPermissionsUser
  users(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsUser]
  me: UsersPermissionsMe
}

input RoleInput {
  name: String!
  description: String
  type: String
  permissions: [ID]
  users: [ID]
}

"""
Room is a place typically inside of the museum building, where the exhibition happens.
"""
type Room {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  name: String
  number: String
  locations(sort: String, limit: Int, start: Int, where: JSON): [Location]
}

input RoomInput {
  name: String
  number: String
  locations: [ID]
}

"""Group of art pieces from the exhibition."""
type Section {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  name: String
  description: String
  exhibition: Exhibition
  multimedias(sort: String, limit: Int, start: Int, where: JSON): [Multimedia]
  artworks(sort: String, limit: Int, start: Int, where: JSON): [Artwork]
}

input SectionInput {
  name: String
  description: String
  exhibition: ID
  multimedias: [ID]
  artworks: [ID]
}

"""The sequence is an ordered list of the multimedia objects in a step."""
type Sequence {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  sequenceNumber: Int
  multimedia: Multimedia
  step: Step
}

input SequenceInput {
  sequenceNumber: Int
  multimedia: ID
  step: ID
}

"""List of steps creates a tour."""
type Step {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  title: String
  description: String
  coverPicture: UploadFile
  tour: Tour
  orderedMediaResources(sort: String, limit: Int, start: Int, where: JSON): [Sequence]
  locations(sort: String, limit: Int, start: Int, where: JSON): [Location]
}

input StepInput {
  title: String
  description: String
  coverPicture: ID
  orderedMediaResources: [ID]
  locations: [ID]
  tour: ID
}

"""Ticket to the museum exhibition."""
type Ticket {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  name: String
  description: String
  price: Float
  exhibitions(sort: String, limit: Int, start: Int, where: JSON): [Exhibition]
}

input TicketInput {
  name: String
  description: String
  price: Float
  exhibitions: [ID]
}

"""The tour is a recommended way to experience an exhibition."""
type Tour {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  name: String
  description: String
  steps(sort: String, limit: Int, start: Int, where: JSON): [Step]
}

input TourInput {
  name: String
  description: String
  steps: [ID]
}

input updateArtworkInput {
  where: InputID
  data: editArtworkInput
}

type updateArtworkPayload {
  artwork: Artwork
}

input updateAuthorInput {
  where: InputID
  data: editAuthorInput
}

type updateAuthorPayload {
  author: Author
}

input updateExhibitionInput {
  where: InputID
  data: editExhibitionInput
}

type updateExhibitionPayload {
  exhibition: Exhibition
}

input updateLocationInput {
  where: InputID
  data: editLocationInput
}

type updateLocationPayload {
  location: Location
}

input updateMultimediaInput {
  where: InputID
  data: editMultimediaInput
}

type updateMultimediaPayload {
  multimedia: Multimedia
}

input updateRoleInput {
  where: InputID
  data: editRoleInput
}

type updateRolePayload {
  role: UsersPermissionsRole
}

input updateRoomInput {
  where: InputID
  data: editRoomInput
}

type updateRoomPayload {
  room: Room
}

input updateSectionInput {
  where: InputID
  data: editSectionInput
}

type updateSectionPayload {
  section: Section
}

input updateSequenceInput {
  where: InputID
  data: editSequenceInput
}

type updateSequencePayload {
  sequence: Sequence
}

input updateStepInput {
  where: InputID
  data: editStepInput
}

type updateStepPayload {
  step: Step
}

input updateTicketInput {
  where: InputID
  data: editTicketInput
}

type updateTicketPayload {
  ticket: Ticket
}

input updateTourInput {
  where: InputID
  data: editTourInput
}

type updateTourPayload {
  tour: Tour
}

input updateUserInput {
  where: InputID
  data: editUserInput
}

type updateUserPayload {
  user: UsersPermissionsUser
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type UploadFile {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  name: String!
  hash: String!
  sha256: String
  ext: String
  mime: String!
  size: String!
  url: String!
  provider: String!
  public_id: String
  related(sort: String, limit: Int, start: Int, where: JSON): [Morph]
}

input UserInput {
  username: String!
  email: String!
  provider: String
  password: String
  resetPasswordToken: String
  confirmed: Boolean
  blocked: Boolean
  role: ID
}

type UsersPermissionsMe {
  _id: ID!
  username: String!
  email: String!
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsMeRole
}

type UsersPermissionsMeRole {
  _id: ID!
  name: String!
  description: String
  type: String
}

type UsersPermissionsPermission {
  id: ID!
  type: String!
  controller: String!
  action: String!
  enabled: Boolean!
  policy: String
  role: UsersPermissionsRole
}

type UsersPermissionsRole {
  id: ID!
  name: String!
  description: String
  type: String
  permissions(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsPermission]
  users(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsUser]
}

type UsersPermissionsUser {
  id: ID!
  username: String!
  email: String!
  provider: String
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsRole
}
