input createExhibitionInput {
  data: ExhibitionInput
}

type createExhibitionPayload {
  exhibition: Exhibition
}

input createLocationInput {
  data: LocationInput
}

type createLocationPayload {
  location: Location
}

input createRoleInput {
  data: RoleInput
}

type createRolePayload {
  role: UsersPermissionsRole
}

input createRoomInput {
  data: RoomInput
}

type createRoomPayload {
  room: Room
}

input createSectionInput {
  data: SectionInput
}

type createSectionPayload {
  section: Section
}

input createTicketInput {
  data: TicketInput
}

type createTicketPayload {
  ticket: Ticket
}

input createUserInput {
  data: UserInput
}

type createUserPayload {
  user: UsersPermissionsUser
}

"""
The `DateTime` scalar represents a date and time following the ISO 8601 standard
"""
scalar DateTime

input deleteExhibitionInput {
  where: InputID
}

type deleteExhibitionPayload {
  exhibition: Exhibition
}

input deleteLocationInput {
  where: InputID
}

type deleteLocationPayload {
  location: Location
}

input deleteRoleInput {
  where: InputID
}

type deleteRolePayload {
  role: UsersPermissionsRole
}

input deleteRoomInput {
  where: InputID
}

type deleteRoomPayload {
  room: Room
}

input deleteSectionInput {
  where: InputID
}

type deleteSectionPayload {
  section: Section
}

input deleteTicketInput {
  where: InputID
}

type deleteTicketPayload {
  ticket: Ticket
}

input deleteUserInput {
  where: InputID
}

type deleteUserPayload {
  user: UsersPermissionsUser
}

input editExhibitionInput {
  title: String
  description: String
  from: DateTime
  to: DateTime
  tickets: [ID]
  sections: [ID]
}

input editFileInput {
  name: String
  hash: String
  sha256: String
  ext: String
  mime: String
  size: String
  url: String
  provider: String
  public_id: String
  related: [ID]
}

input editLocationInput {
  name: String
  room: ID
}

input editRoleInput {
  name: String
  description: String
  type: String
  permissions: [ID]
  users: [ID]
}

input editRoomInput {
  name: String
  number: String
  locations: [ID]
}

input editSectionInput {
  name: String
  description: String
  exhibition: ID
}

input editTicketInput {
  name: String
  description: String
  price: Float
  exhibitions: [ID]
}

input editUserInput {
  username: String
  email: String
  provider: String
  password: String
  resetPasswordToken: String
  confirmed: Boolean
  blocked: Boolean
  role: ID
}

"""Future, past and present exhibition in the museum."""
type Exhibition {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  title: String
  description: String
  from: DateTime
  to: DateTime
  tickets(sort: String, limit: Int, start: Int, where: JSON): [Ticket]
  sections(sort: String, limit: Int, start: Int, where: JSON): [Section]
}

input ExhibitionInput {
  title: String
  description: String
  from: DateTime
  to: DateTime
  tickets: [ID]
  sections: [ID]
}

input FileInput {
  name: String!
  hash: String!
  sha256: String
  ext: String
  mime: String!
  size: String!
  url: String!
  provider: String!
  public_id: String
  related: [ID]
}

input InputID {
  id: ID!
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

"""Location is precise and easy to locate part of the room."""
type Location {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  name: String
  room: Room
}

input LocationInput {
  name: String
  room: ID
}

"""The `Long` scalar type represents 52-bit integers"""
scalar Long

union Morph = UsersPermissionsMe | UsersPermissionsMeRole | Exhibition | createExhibitionPayload | updateExhibitionPayload | deleteExhibitionPayload | Location | createLocationPayload | updateLocationPayload | deleteLocationPayload | Room | createRoomPayload | updateRoomPayload | deleteRoomPayload | Section | createSectionPayload | updateSectionPayload | deleteSectionPayload | Ticket | createTicketPayload | updateTicketPayload | deleteTicketPayload | UploadFile | UsersPermissionsPermission | UsersPermissionsRole | createRolePayload | updateRolePayload | deleteRolePayload | UsersPermissionsUser | createUserPayload | updateUserPayload | deleteUserPayload

type Mutation {
  createExhibition(input: createExhibitionInput): createExhibitionPayload
  updateExhibition(input: updateExhibitionInput): updateExhibitionPayload
  deleteExhibition(input: deleteExhibitionInput): deleteExhibitionPayload
  createLocation(input: createLocationInput): createLocationPayload
  updateLocation(input: updateLocationInput): updateLocationPayload
  deleteLocation(input: deleteLocationInput): deleteLocationPayload
  createRoom(input: createRoomInput): createRoomPayload
  updateRoom(input: updateRoomInput): updateRoomPayload
  deleteRoom(input: deleteRoomInput): deleteRoomPayload
  createSection(input: createSectionInput): createSectionPayload
  updateSection(input: updateSectionInput): updateSectionPayload
  deleteSection(input: deleteSectionInput): deleteSectionPayload
  createTicket(input: createTicketInput): createTicketPayload
  updateTicket(input: updateTicketInput): updateTicketPayload
  deleteTicket(input: deleteTicketInput): deleteTicketPayload

  """Create a new role"""
  createRole(input: createRoleInput): createRolePayload

  """Update an existing role"""
  updateRole(input: updateRoleInput): updateRolePayload

  """Delete an existing role"""
  deleteRole(input: deleteRoleInput): deleteRolePayload

  """Create a new user"""
  createUser(input: createUserInput): createUserPayload

  """Update an existing user"""
  updateUser(input: updateUserInput): updateUserPayload

  """Delete an existing user"""
  deleteUser(input: deleteUserInput): deleteUserPayload
  upload(refId: ID, ref: String, source: String, file: Upload!): UploadFile!
}

type Query {
  exhibition(id: ID!): Exhibition
  exhibitions(sort: String, limit: Int, start: Int, where: JSON): [Exhibition]
  location(id: ID!): Location
  locations(sort: String, limit: Int, start: Int, where: JSON): [Location]
  room(id: ID!): Room
  rooms(sort: String, limit: Int, start: Int, where: JSON): [Room]
  section(id: ID!): Section
  sections(sort: String, limit: Int, start: Int, where: JSON): [Section]
  ticket(id: ID!): Ticket
  tickets(sort: String, limit: Int, start: Int, where: JSON): [Ticket]
  files(sort: String, limit: Int, start: Int, where: JSON): [UploadFile]
  role(id: ID!): UsersPermissionsRole

  """
  Retrieve all the existing roles. You can't apply filters on this query.
  """
  roles(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsRole]
  user(id: ID!): UsersPermissionsUser
  users(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsUser]
  me: UsersPermissionsMe
}

input RoleInput {
  name: String!
  description: String
  type: String
  permissions: [ID]
  users: [ID]
}

"""
Room is a place typically inside of the museum building, where the exhibition happens.
"""
type Room {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  name: String
  number: String
  locations(sort: String, limit: Int, start: Int, where: JSON): [Location]
}

input RoomInput {
  name: String
  number: String
  locations: [ID]
}

"""Group of art pieces from the exhibition."""
type Section {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  name: String
  description: String
  exhibition: Exhibition
}

input SectionInput {
  name: String
  description: String
  exhibition: ID
}

"""Ticket to the museum exhibition."""
type Ticket {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  name: String
  description: String
  price: Float
  exhibitions(sort: String, limit: Int, start: Int, where: JSON): [Exhibition]
}

input TicketInput {
  name: String
  description: String
  price: Float
  exhibitions: [ID]
}

input updateExhibitionInput {
  where: InputID
  data: editExhibitionInput
}

type updateExhibitionPayload {
  exhibition: Exhibition
}

input updateLocationInput {
  where: InputID
  data: editLocationInput
}

type updateLocationPayload {
  location: Location
}

input updateRoleInput {
  where: InputID
  data: editRoleInput
}

type updateRolePayload {
  role: UsersPermissionsRole
}

input updateRoomInput {
  where: InputID
  data: editRoomInput
}

type updateRoomPayload {
  room: Room
}

input updateSectionInput {
  where: InputID
  data: editSectionInput
}

type updateSectionPayload {
  section: Section
}

input updateTicketInput {
  where: InputID
  data: editTicketInput
}

type updateTicketPayload {
  ticket: Ticket
}

input updateUserInput {
  where: InputID
  data: editUserInput
}

type updateUserPayload {
  user: UsersPermissionsUser
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type UploadFile {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  name: String!
  hash: String!
  sha256: String
  ext: String
  mime: String!
  size: String!
  url: String!
  provider: String!
  public_id: String
  related(sort: String, limit: Int, start: Int, where: JSON): [Morph]
}

input UserInput {
  username: String!
  email: String!
  provider: String
  password: String
  resetPasswordToken: String
  confirmed: Boolean
  blocked: Boolean
  role: ID
}

type UsersPermissionsMe {
  _id: ID!
  username: String!
  email: String!
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsMeRole
}

type UsersPermissionsMeRole {
  _id: ID!
  name: String!
  description: String
  type: String
}

type UsersPermissionsPermission {
  id: ID!
  type: String!
  controller: String!
  action: String!
  enabled: Boolean!
  policy: String
  role: UsersPermissionsRole
}

type UsersPermissionsRole {
  id: ID!
  name: String!
  description: String
  type: String
  permissions(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsPermission]
  users(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsUser]
}

type UsersPermissionsUser {
  id: ID!
  username: String!
  email: String!
  provider: String
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsRole
}
